import unittest
import SHOUTCLOUDV2
from unittest.mock import patch

class shoutcloudv2(unittest.TestCase):
    @patch('requests.post')

    def test_shout(self, mock_post):
        test_cases = (("hellow",200, """{ "INPUT":"hellow","OUTPUT":"HELLOW" }""", {"INPUT":"hellow","OUTPUT":"HELLOW"},"HELLOW"),
                      ("adios",200, """{ "INPUT":"holi","OUTPUT":"HOLI" }""", {"INPUT":"holi","OUTPUT":"HOLI"},"ADIOS")
                      )

        for entrada, code, esperado in test_cases:
            mock_post.return_value.status_code = code
            mock_post.return_value.text = mock_text

            salida_real = SHOUTCLOUDV2.mayus(entrada)
            self.assertSequenceEqual(salida_real,esperado)

if __name__ == '__main__':
    unittest.main()


import unittest
from unittest.mock import patch
import SHOUTCLOUDV2

class TestRequest(unittest.TestCase):
    @patch("requests.post")
    def test_shout(self, post_mock):
        test_cases = (
            # entrada, mock.code, mock.text, esperada
            ("tristesa", 404, '404 page not found', {}, "error, mensaje: 404 page not found"),
            ("holi", 200, """{ "INPUT":"holi","OUTPUT":"HOLI" }""", {"INPUT":"holi","OUTPUT":"HOLI"}, "HOLI"),
            ("adios", 200, """{ "INPUT":"adios","OUTPUT":"ADIOS" }""", {"INPUT":"adios","OUTPUT":"ADIOS"}, "ADIOS"),
            ("TACOS", 200, """{ "INPUT":"TACOS","OUTPUT":"TACOS" }""", {"INPUT":"TACOS","OUTPUT":"TACOS"}, "TACOS")
        )

        for entrada, code, mock_text, mock_dic, esperada in test_cases:
            post_mock.return_value.status_code = code
            post_mock.return_value.text = mock_text
            post_mock.return_value.json = lambda : mock_dic

            salida_real = SHOUTCLOUDV2.mayus(entrada)
            self.assertEqual(salida_real, esperada)

if __name__ == "__main__":
    unittest.main()
